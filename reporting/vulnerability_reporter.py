from datetime import datetime
from backend.core.vulnerability_scorer import VulnerabilityScorer

class VulnerabilityReporter:
    def __init__(self):
        self.scorer = VulnerabilityScorer()

    def generate_report(self, vulnerabilities, source_info):
        report = {
            "audit_info": {
                "timestamp": datetime.now().isoformat(),
                "tool": "MVP Audit Tool v0.1",
                "source": source_info
            },
            "summary": self._generate_summary(vulnerabilities),
            "vulnerabilities": [],
            "recommendations": []
        }
        for vuln in vulnerabilities:
            report["vulnerabilities"].append(vuln)
        report["recommendations"] = self._generate_general_recommendations()
        return report

    def _generate_summary(self, vulnerabilities):
        total = len(vulnerabilities)
        high = sum(1 for v in vulnerabilities if v["confidence_score"] >= 8)
        medium = sum(1 for v in vulnerabilities if v["confidence_score"] == 7)
        return {
            "total_vulnerabilities": total,
            "high_confidence": high,
            "medium_confidence": medium,
            "risk_level": "HIGH" if high else "MEDIUM" if medium else "LOW"
        }

    def _generate_general_recommendations(self):
        return [
            "Revue de code systématique",
            "Tests de sécurité en CI/CD",
            "Formation DevSecOps",
            "Audits réguliers"
        ]
